#lang racket

;Exercise 3.51. In order to take a closer look at delayed evaluation, we will use the following
;procedure, which simply returns its argument after printing it:

(define (cons-stream a b)(cons a (delay b)))
(define (stream-car a)(car a))
(define (stream-cdr a)(force (cdr a)))

(define (display-line x)
  (newline)
  (display x))

(define (show x)
  (display-line x)
  x)

(define (stream-enumerate low high)
  (if (> low high)
      '()
      (cons-stream low (stream-enumerate (+ low 1) high))))

;(define (stream-for-each proc s)
;  (if (null? s)
;      'done
;      (begin (proc(stream-car s))
;             (stream-for-each proc (stream-cdr s)))))

(define (stream-map proc s)
  (if (null? s)
      '()
      (cons-stream (proc(stream-car s))
            (stream-map proc (stream-cdr s)))))

(define x (stream-map show (stream-enumerate 0 10)))

(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))

(newline)
(display "Stream Ref 5:\t")
(stream-ref x 5)
(newline)
(display "Stream Ref 7:\t")
(stream-ref x 7)
