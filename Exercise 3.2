;Exercise 3.2.
;In software-testing applications, it is useful to be able to count the number of times a
;given procedure is called during the course of a computation. Write a procedure make-monitored
;that takes as input a procedure, f, that itself takes one input. The result returned by
;make-monitored is a third procedure, say mf, that keeps track of the number of times it has been
;called by maintaining an internal counter. If the input to mf is the special symbol
;how-many-calls?, then mf returns the value of the counter. If the input is the special symbol
;reset-count, then mf resets the counter to zero. For any other input, mf returns the result of
;calling f on that input and increments the counter. For instance, we could make a monitored version of
;the sqrt procedure:


(define (make-monitored)
  (define count 0)
  (define (how-many-calls?)
    (set! count (+ count 0))
    count)
  (define (square x)
    (begin (set! count (+ count 1))
           (* x x)))
  (define (reset-count)
    (set! count 0))
    
  (define (dispatch op)
    (cond((eq? op 'how-many-calls?) how-many-calls?)
         ((eq? op 'reset-count) reset-count)
         ((eq? op 'square) square)
         (else (display "Unknown operation-SQUARE"))))
  dispatch)

(define s (make-monitored))

(display "square value:")
((s 'square) 10)
(display "The number of times the function has been called:")
((s 'how-many-calls?))
(display "square value:")
((s 'square) 20)
(display "square value:")
((s 'square) 9)
(display "The number of times the function has been called:")
((s 'how-many-calls?))
((s 'reset-count))
(display "Result of reset:")
((s 'how-many-calls?))
           
    
