#lang racket

;Exercise 2.1. Define a better version of make-rat that handles both positive and negative
;arguments. Make-rat should normalize the sign so that if the rational number is positive, both the
;numerator and denominator are positive, and if the rational number is negative, only the numerator is
;negative.

(define (make-rat n d)
  (let ((g (gcd n d)))
    (cons (/ n g) (/ d g))))

(define (make-rat1 n d)
  (cond ((and (< n 0)(< d 0))(cons (* -1 n) (* -1 d)))
        ((and (< n 0)(> d 0))(cons n d))
        ((and (> n 0)(< d 0))(cons (* -1 n) (* -1 d)))
        (else (cons n d))))
                             

(define (numer x)(car x))
(define (denom x)(cdr x))

(define a (make-rat1 1 -2))
(define b (make-rat 3 4))
a
b

(define (add-rat x y)
  (make-rat1 (+ (* (numer x)(denom y))
               (* (numer y)(denom x)))
            (* (denom x)(denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x)(denom y))
               (* (numer y)(denom x)))
            (* (denom x)(denom y))))

(define (mult-rat x y)
  (make-rat(* (numer x)(numer y))
           (* (denom x)(denom y))))

(define (equal-rat? x y)
  (= (* (numer x)(denom y))(* (numer y)(denom x))))

(add-rat a b)
(define c (add-rat a b))
(sub-rat c a)


(define (reduced-rat x)
  (let ((g (gcd (numer x)(denom x))))
    (make-rat (/ (numer x) g)(/ (denom x) g))))

(define y (reduced-rat (sub-rat c a)))

(cdr y)
     
